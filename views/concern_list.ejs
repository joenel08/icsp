<% if (!user) { %>
  <script>
    alert("Please log in first.");
    window.location.href = "/";
  </script>
  <% } %>
    <!DOCTYPE html>
    <html lang="en">

    <head>
      <title>ICSP - Concern List Page</title>



      <%- include('partials/headerlink') %>

    </head>

    <body class="app">
      <header class="app-header fixed-top">

        <%- include('partials/navbar') %>
          <%- include('partials/sidebar') %>


      </header><!--//app-header-->

      <div class="app-wrapper">
        <div class="app-content pt-3 p-md-3 p-lg-4">
          <div class="container-xl">
            <div class="app-card">
              <div class="app-card-header pt-3 p-md-3 p-lg-4">
                <h1 class="app-page-title">Concern List</h1>
                <div class="filter-controls d-flex align-items-center gap-3 mt-3">
                  <div class="priority-filter">
                    <!-- <label for="priorityFilter" class="form-label">Filter by Priority:</label> -->
                    <select id="priorityFilter" class="form-select" style="width: 200px;">
                      <option value="all">All Priorities</option>
                      <option value="high">High</option>
                      <option value="mid">Mid</option>
                      <option value="low">Low</option>
                    </select>
                  </div>
                  <button id="exportCSV" class="btn btn-primary">
                    <i class="fas fa-file-export me-2"></i>Export to CSV
                  </button>
                </div>
              </div>
              <div class="app-card-body  p-3 border-bottom-0">

                <table id="list" class="table table-striped table-bordered">
                  <thead>
                    <tr>
                      <th>Email</th>
                      <th>Category</th>
                      <th>Description</th>
                      <th>Image</th>
                      <th>Location</th>

                      <th>Priority Level</th>
                      <th>Action</th>
                    </tr>
                  </thead>
                  <tbody>
                    <% concerns.forEach(concern=> { %>
                      <tr>
                        <td>
                          <%= concern.email %>
                        </td>
                        <td>
                          <%= concern.category %>
                        </td>
                        <td>
                          <%= concern.concern_text %>
                        </td>
                        <td><img class="img-fluid" style="max-width: 200px" src="<%= concern.image_path %>" alt=""></td>

                        <td>
                          <a href="#" class="show-map-link"
                            data-location="<%= concern.location.coordinates.join(',') %>">
                            <span class="address-text" data-location="<%= concern.location.coordinates.join(',') %>">
                              Loading address...
                            </span>
                          </a>
                        </td>

                        <td>
                          <% if (concern.category_details) { %>
                            <span class="badge 
                              <%= concern.category_details.priority_level === 'high' ? 'bg-danger' : 
                                  concern.category_details.priority_level === 'mid' ? 'bg-warning' : 
                                  'bg-info' %>">
                              <%= concern.category_details.priority_level %>
                            </span>
                          <% } else { %>
                            <span class="badge bg-secondary">No Priority</span>
                          <% } %>
                        </td>
                        
                        <td class="text-center">
                          <% if (concern.concern_status==='submitted' ) { %>
                            <button class="btn btn-sm btn-success accept-btn" data-concern-id="<%= concern._id %>">
                              Accept
                            </button>
                            <% } else if (concern.concern_status==='on-going' ) { %>
                              <button class="btn btn-sm btn-primary complete-btn" data-concern-id="<%= concern._id %>">
                                Complete
                              </button>
                              <% } else if (concern.concern_status==='completed' ) { %>
                                <div class="d-grid gap-2">
                                  <button class="btn btn-sm btn-secondary done-btn" data-concern-id="<%= concern._id %>"
                                    <%=concern.proof_url ? 'disabled' : '' %>>
                                    <%= concern.proof_url ? 'Completed' : 'Upload Proof' %>
                                  </button>
                                  <% if (concern.proof_url) { %>
                                    <a href="<%= concern.proof_url %>" target="_blank" class="btn btn-sm btn-info">View
                                      Proof</a>
                                    <% } %>
                                </div>
                                <% } %>
                        </td>
                      </tr>
                      <% }); %>
                  </tbody>
                </table>

              </div>
            </div>
          </div><!--//container-xl-->
        </div><!--//app-content-->
        <!-- Footer -->
        <%- include('partials/footer') %>
      </div><!--//app-wrapper-->

      <!-- Map Modal -->
      <div class="modal fade" id="mapModal" tabindex="-1" aria-labelledby="mapModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="mapModalLabel">Location Details</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <div id="map" style="height: 400px; width: 100%;"></div>
              <div id="fullAddress" class="mt-3"></div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
          </div>
        </div>
      </div>

      <%- include('partials/footerLink') %>
        <!-- Add Leaflet.js for maps (include in your header or footer) -->
        <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
        <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
        <script>
          $(document).ready(function () {
            // Initialize DataTable with buttons extension
    const table = $('#list').DataTable({
      dom: 'Bfrtip',
      buttons: [
        {
          extend: 'csv',
          text: '<i class="fas fa-file-csv"></i> CSV',
          title: 'Concerns_List',
          exportOptions: {
            columns: ':visible'
          }
        }
      ],
      initComplete: function() {
        // Hide the default DataTable CSV button (we'll use our custom one)
        $('.buttons-csv').hide();
      }
    });

    // Priority filter functionality
    $('#priorityFilter').on('change', function() {
      const priority = this.value;
      
      if (priority === 'all') {
        table.columns(5).search('').draw(); // Clear search on priority column
      } else {
        table.columns(5).search(priority).draw(); // Filter by priority
      }
    });

    // Custom CSV export button
    $('#exportCSV').on('click', function() {
      // Get current filtered data
      const filteredData = table.rows({ search: 'applied' }).data();
      
      // Convert to CSV
      let csvContent = "Email,Category,Concern Text,Image Path,Location,Priority Level,Status\n";
      
      filteredData.each(function(row) {
        const email = row[0];
        const category = row[1];
        const concernText = row[2].replace(/"/g, '""'); // Escape quotes
        const imagePath = row[3].match(/src="([^"]*)"/)[1]; // Extract image path
        const location = $(row[4]).find('.address-text').text();
        const priority = $(row[5]).text().trim();
        const status = priority === 'high' ? 'High' : 
                       priority === 'mid' ? 'Mid' : 'Low';
        
        csvContent += `"${email}","${category}","${concernText}","${imagePath}","${location}","${priority}","${status}"\n`;
      });
      
      // Download CSV file
      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.setAttribute('href', url);
      link.setAttribute('download', `concerns_${new Date().toISOString().slice(0,10)}.csv`);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    });
          })
        </script>
        <script>
          // Store the map variable globally
          let map;
          let marker;

          function showMapInModal(lat, lng, address) {
            const modal = new bootstrap.Modal(document.getElementById('mapModal'));
            document.getElementById('fullAddress').textContent = address;

            // Initialize map with no maximum zoom constraint
            if (!map) {
              map = L.map('map', {
                maxZoom: 19,  // Set to the highest level your tile server supports (typically 18-22)
                zoomControl: true  // Ensure zoom controls are enabled
              }).setView([lat, lng], 15);

              L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
                maxZoom: 19  // Should match the map's maxZoom
              }).addTo(map);

              // Add slight delay to ensure proper rendering
              setTimeout(() => {
                map.invalidateSize();
                map.setView([lat, lng], 15);
              }, 100);
            } else {
              map.setView([lat, lng], 15);
              map.invalidateSize();
            }

            // Remove existing marker if any
            if (marker) {
              map.removeLayer(marker);
            }

            // Add new marker
            marker = L.marker([lat, lng]).addTo(map)
              .bindPopup(address)
              .openPopup();

            modal.show();
            setTimeout(() => map.invalidateSize(), 300);
          }

          // Click handler for address links
          document.addEventListener('DOMContentLoaded', function () {
            document.querySelectorAll('.show-map-link').forEach(link => {
              link.addEventListener('click', function (e) {
                e.preventDefault();
                const coords = this.getAttribute('data-location').split(',');
                if (coords.length === 2) {
                  const lat = coords[1];
                  const lng = coords[0];
                  const address = this.querySelector('.address-text').textContent;
                  showMapInModal(lat, lng, address);
                }
              });
            });
          });

          // Update your existing getAddress function to update both the display and the link
          async function getAddress(lat, lng, element) {
            try {
              const response = await fetch(
                `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}`
              );
              const data = await response.json();

              let address = '';
              if (data.address) {
                address = [
                  data.address.road,
                  data.address.neighbourhood,
                  data.address.suburb,
                  data.address.city || data.address.town || data.address.village,
                  data.address.state,
                  data.address.country
                ].filter(Boolean).join(', ');
              }

              const displayAddress = address || 'Address not available';
              element.textContent = displayAddress;

              // Update the parent link's title attribute for better UX
              if (element.closest('.show-map-link')) {
                element.closest('.show-map-link').setAttribute('title', 'Click to view on map');
              }
            } catch (error) {
              console.error("Geocoding error:", error);
              element.textContent = 'Error loading address';
            }
          }

          // Update your existing query selector to target the .address-text elements
          document.querySelectorAll('.address-text').forEach((el, index) => {
            const coords = el.getAttribute('data-location').split(',');
            if (coords.length === 2) {
              setTimeout(() => {
                getAddress(coords[1], coords[0], el);
              }, index * 1000);
            }
          });
        </script>

        <script>
          document.addEventListener('DOMContentLoaded', function () {
            // Handle accept buttons
            document.querySelectorAll('.accept-btn').forEach(btn => {
              btn.addEventListener('click', function (e) {
                e.preventDefault();
                const concernId = this.getAttribute('data-concern-id');

                Swal.fire({
                  title: 'Confirm Acceptance',
                  text: 'Are you sure you want to accept this concern?',
                  icon: 'question',
                  showCancelButton: true,
                  confirmButtonColor: '#3085d6',
                  cancelButtonColor: '#d33',
                  confirmButtonText: 'Yes, accept it!'
                }).then((result) => {
                  if (result.isConfirmed) {
                    updateConcernStatus(concernId, 'on-going');
                  }
                });
              });
            });

            // Handle complete buttons
            document.querySelectorAll('.complete-btn').forEach(btn => {
              btn.addEventListener('click', function (e) {
                e.preventDefault();
                const concernId = this.getAttribute('data-concern-id');

                Swal.fire({
                  title: 'Confirm Completion',
                  text: 'Are you sure you want to mark this concern as completed?',
                  icon: 'question',
                  showCancelButton: true,
                  confirmButtonColor: '#3085d6',
                  cancelButtonColor: '#d33',
                  confirmButtonText: 'Yes, complete it!'
                }).then((result) => {
                  if (result.isConfirmed) {
                    updateConcernStatus(concernId, 'completed');
                  }
                });
              });
            });

            function updateConcernStatus(concernId, newStatus) {
              fetch(`/update-concern-status/${concernId}`, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({ newStatus })
              })
                .then(response => response.json())
                .then(data => {
                  if (data.success) {
                    Swal.fire({
                      title: 'Success!',
                      text: `Status updated to ${newStatus} successfully!`,
                      icon: 'success',
                      timer: 1500,
                      showConfirmButton: false
                    }).then(() => {
                      location.reload();
                    });
                  } else {
                    Swal.fire({
                      title: 'Error!',
                      text: data.message || 'Failed to update status',
                      icon: 'error'
                    });
                  }
                })
                .catch(error => {
                  console.error('Error:', error);
                  Swal.fire({
                    title: 'Error!',
                    text: 'An error occurred while updating status',
                    icon: 'error'
                  });
                });
            }


            document.querySelectorAll('.done-btn').forEach(btn => {
              btn.addEventListener('click', function (e) {
                e.preventDefault();
                const concernId = this.getAttribute('data-concern-id');

                Swal.fire({
                  title: 'Upload Completion Proof',
                  html: `
            <input type="file" id="proofUpload" class="form-control my-3">
            <div class="progress mt-3" style="display: none;">
              <div class="progress-bar" role="progressbar" style="width: 0%"></div>
            </div>
          `,
                  showCancelButton: true,
                  confirmButtonText: 'Upload',
                  cancelButtonText: 'Cancel',
                  preConfirm: () => {
                    const fileInput = document.getElementById('proofUpload');
                    if (!fileInput.files.length) {
                      Swal.showValidationMessage('Please select a file');
                      return false;
                    }

                    const file = fileInput.files[0];
                    if (file.size > 5 * 1024 * 1024) { // 5MB limit
                      Swal.showValidationMessage('File size must be less than 5MB');
                      return false;
                    }

                    // Show progress bar
                    const progressBar = Swal.getHtmlContainer().querySelector('.progress');
                    const progressBarInner = progressBar.querySelector('.progress-bar');
                    progressBar.style.display = 'block';

                    return new Promise((resolve) => {
                      const formData = new FormData();
                      formData.append('proof', file);

                      const xhr = new XMLHttpRequest();
                      xhr.open('POST', `/upload-proof/${concernId}`, true);

                      xhr.upload.onprogress = (e) => {
                        if (e.lengthComputable) {
                          const percentComplete = Math.round((e.loaded / e.total) * 100);
                          progressBarInner.style.width = `${percentComplete}%`;
                          progressBarInner.textContent = `${percentComplete}%`;
                        }
                      };

                      xhr.onload = () => {
                        if (xhr.status === 200) {
                          resolve(JSON.parse(xhr.responseText));
                        } else {
                          Swal.showValidationMessage('Upload failed');
                          resolve(false);
                        }
                      };

                      xhr.onerror = () => {
                        Swal.showValidationMessage('Upload failed');
                        resolve(false);
                      };

                      xhr.send(formData);
                    });
                  }
                }).then((result) => {
                  if (result.isConfirmed && result.value && result.value.success) {
                    Swal.fire({
                      title: 'Success!',
                      text: 'Proof uploaded successfully!',
                      icon: 'success',
                      timer: 1500,
                      showConfirmButton: false
                    }).then(() => {
                      location.reload();
                    });
                  }
                });
              });
            });
          });
        </script>
    </body>

    </html>